name: tests
on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/tests.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/tests.yml'
  schedule:
    - cron: '0 2 * * *'  # щодня о 02:00 UTC
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Verify GitHub Actions versions are pinned
        run: |
          python3 - <<'PY'
          import re
          import sys
          from pathlib import Path

          pattern = re.compile(r"^\s*uses:\s*([^@\s]+)@([^\s]+)\s*$")
          allowed_tags = {"v4", "v5"}
          hex_pattern = re.compile(r"^[0-9a-fA-F]{40}$")
          errors = []

          workflows_dir = Path('.github/workflows')
          workflow_files = list(workflows_dir.rglob('*.yml')) + list(workflows_dir.rglob('*.yaml'))

          for workflow in workflow_files:
              for line_number, line in enumerate(workflow.read_text().splitlines(), start=1):
                  match = pattern.match(line)
                  if not match:
                      continue
                  version = match.group(2)
                  if version in allowed_tags or hex_pattern.fullmatch(version):
                      continue
                  errors.append((workflow, line_number, line.strip()))

          if errors:
              print('Found GitHub Actions without pinned versions:', file=sys.stderr)
              for workflow, line_number, line in errors:
                  print(f"{workflow}:{line_number}: {line}", file=sys.stderr)
              sys.exit(1)
          PY
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - run: pip install pre-commit black isort ruff
      - run: pre-commit run --all-files
  unit:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python: ['3.10', '3.11', '3.12']
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
      - name: Cache pytest cache
        uses: actions/cache@v4
        with:
          path: .pytest_cache
          key: ${{ runner.os }}-pytest-${{ github.sha }}
          restore-keys: ${{ runner.os }}-pytest-
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-py${{ matrix.python }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: ${{ runner.os }}-py${{ matrix.python }}-pip-
      - run: python -m pip install -U pip
      - run: pip install -r requirements-dev.txt
      - run: pip install -e .[dev]
      - run: pytest -q --junitxml=pytest-report.xml
      - uses: actions/upload-artifact@v4
        with:
          name: junit
          path: pytest-report.xml
      - run: coverage xml
      - uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml
      - name: Upload coverage to Codecov
        if: secrets.CODECOV_TOKEN != ''
        uses: codecov/codecov-action@v4
        with:
          files: coverage.xml
          fail_ci_if_error: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      - name: Upload failure artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: failure-artifacts
          path: |
            .pytest_cache
            logs/**
            reports/**
  integration:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_DB: app
        ports: ['5432:5432']
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s --health-timeout=5s --health-retries=5
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Cache pytest cache
        uses: actions/cache@v4
        with:
          path: .pytest_cache
          key: ${{ runner.os }}-pytest-${{ github.sha }}
          restore-keys: ${{ runner.os }}-pytest-
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-integration-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: ${{ runner.os }}-integration-pip-
      - run: python -m pip install -U pip
      - run: pip install -r requirements-dev.txt
      - run: pip install -e .[dev]
      - env:
          DATABASE_URL: postgresql://postgres:test@localhost:5432/app
        run: pytest tests/integration -q
      - name: Upload failure artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: failure-artifacts
          path: |
            .pytest_cache
            logs/**
            reports/**
